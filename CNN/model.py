import torch
import torch.nn as nn
import torch.nn.functional as F

class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv1d(20, 20, 2)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv1d(20, 20, 2)
        self.conv3 = nn.Conv1d(20, 20, 2)
        # self.conv4 = nn.Conv1d(20, 20, 4)
        # self.conv5 = nn.Conv1d(20, 20, 4)
        # self.conv6 = nn.Conv1d(20, 20, 4)
        self.gmp = nn.MaxPool1d(1,1)
        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(36, 64)
        self.fc2 = nn.Linear(64,2)

    def forward(self, x):
        x = self.conv1(x)
        x = self.relu(x)
        x = self.conv2(x)
        x = self.relu(x)
        x = self.conv3(x)
        # x = self.conv4(x)
        # x = self.conv5(x)
        # x = self.conv6(x)
        x = self.gmp(x)
        x = self.flatten(x)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.fc2(x)
        x = F.log_softmax(x, dim=-1)
        return x
    

class Multi_Scale_CNN(nn.Module):
    def __init__(self):
        super(Multi_Scale_CNN, self).__init__()
        self.conv1 = nn.Conv1d(20, 20, 1)
        self.conv2 = nn.Conv1d(20, 20, 2)
        self.conv3 = nn.Conv1d(20, 20, 3)
        self.conv4 = nn.Conv1d(20, 20, 4) 
        self.fc1 = nn.Linear(150, 1024)
        self.fc2 = nn.Linear(1024,512)
        self.fc3 = nn.Linear(512,128)
        self.fc4 = nn.Linear(128,64)
        self.fc5 = nn.Linear(64,2)
        self.batch_norm1 = nn.LazyBatchNorm1d()
        self.batch_norm2 = nn.LazyBatchNorm1d()
        self.batch_norm3 = nn.LazyBatchNorm1d()
        self.batch_norm4 = nn.LazyBatchNorm1d()
        self.batch_norm5 = nn.LazyBatchNorm1d()

    def forward(self, x):
        x1 = self.conv1(x)
        x1 = self.batch_norm1(x1)
        x1 = F.relu(x1)
        x1 = self.conv1(x1)
        x1 = self.batch_norm1(x1)
        x1 = F.relu(x1)
        x2 = self.conv2(x)
        x2 = self.batch_norm2(x2)
        x2 = F.relu(x2)
        x2 = self.conv1(x2)
        x2 = self.batch_norm2(x2)
        x2 = F.relu(x2)
        x3 = self.conv3(x)
        x3 = self.batch_norm3(x3)
        x3 = F.relu(x3)
        x3 = self.conv1(x3)
        x3 = self.batch_norm3(x3)
        x3 = F.relu(x3)
        x4 = self.conv4(x)
        x4 = self.batch_norm4(x4)
        x4 = F.relu(x4)
        x4 = self.conv1(x4)
        x4 = self.batch_norm4(x4)
        x4 = F.relu(x4)
        x = torch.cat((x1, x2, x3, x4), dim=1)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.fc2(x)
        x = F.relu(x)
        x = self.fc3(x)
        x = F.relu(x)
        x = self.fc4(x)
        x = F.relu(x)
        x = self.fc5(x)
        x = F.log_softmax(x, dim=-1)
        return x